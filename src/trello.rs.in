use std::collections::BTreeMap;
use std::io;

extern crate rustc_serialize;
use rustc_serialize::json;


use config;


pub struct TrelloBoardInfo{
    pub board_id:      String,
    pub list_id:       String,
    pub build_pass_id: String,
    pub build_fail_id: String,
}

impl TrelloBoardInfo {

    pub fn new() -> TrelloBoardInfo {
        TrelloBoardInfo {
            board_id:      "".to_string(),
            list_id:       "".to_string(),
            build_pass_id: "".to_string(),
            build_fail_id: "".to_string(),
        }
    }
}


pub fn setup_api(config: &mut config::TrelloBSTAPIConfig) {

    if config.trello_api_key.is_empty() || config.trello_app_token.is_empty() {
        println!("Setting up Trello API Keys...");
    }

    if config.trello_api_key.is_empty() {
        println!("Log into Trello and enter your API key from https://trello.com/app-key : ");
        match io::stdin().read_line(&mut config.trello_api_key) {
            Ok(_)  => {config.trello_api_key = config.trello_api_key.trim_matches('\n').to_string();},
            Err(_) => {panic!("Error while reading the input.");}
        }
    }

    if config.trello_app_token.is_empty(){
        println!("Enter your app token from https://trello.com/1/authorize?response_type=token&key={}&scope=read%2Cwrite&expiration=never&name=TrelloBST : ", config.trello_api_key);
        match io::stdin().read_line(&mut config.trello_app_token) {
            Ok(_)  => {config.trello_app_token = config.trello_app_token.trim_matches('\n').to_string();},
            Err(_) => {panic!("Error while reading the input.");}
        }
    }
}


#[derive(RustcDecodable, RustcEncodable)]
pub struct board_info {
    pub name: String,
    pub id:   String
}

#[derive(RustcDecodable, RustcEncodable)]
pub struct members_me_boards_response {
    pub id:          String,
    pub boards: Vec<board_info>,
}





pub fn setup_board(config: config::TrelloBSTAPIConfig, board_info: &mut TrelloBoardInfo) {

}
























